# -*- coding: utf-8 -*-
from youtube_transcript_api import YouTubeTranscriptApi
import openai
import streamlit as st
from streamlit_chat import message
from PIL import Image

im = Image.open("TARS.png")
st.set_page_config(
    page_title="TARS",
    page_icon=im,
)

openai.api_key = "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"
def get_transcript(video_id):
    before, sep, after = video_id.partition('=')
    if len(after) > 0:
        video_id = after
    outls=[]
    tx=YouTubeTranscriptApi.get_transcript(video_id, languages=['ru', 'en'])
    for i in tx:
        outtxt=(i['text'])
        outls.append(outtxt)
    whole=' '.join(outls)
    print(whole.replace("\n", ""),'\n')
    return (whole.replace("\n", ""))

def chat_completion(request, tutor_mode):
    messages = [
        {"role": "system", "content": "–°–µ–π—á–∞—Å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º TARS. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"}
    ]

    # Append past messages to the conversation
    if st.session_state['past']:
        for past_input in st.session_state['past'][::-1]:
            if "youtube.com" not in past_input:
                messages.append({"role": "user", "content": past_input})
    if st.session_state['generated']:
        for past_generated in st.session_state['generated'][::-1]:
                messages.append({"role": "system", "content": past_generated})
    
    if "youtube.com" in request:
        transcript = get_transcript(request)
        request = f"–Ø —Å–æ–±–∏—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≤–∏–¥–µ–æ, –≤—ã –¥–æ–ª–∂–Ω—ã –æ–±–æ–±—â–∏—Ç—å –µ–≥–æ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Ç–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –ø–æ—Ç–æ–º –æ–±–æ–±—â–∏—Ç–µ. –í–æ—Ç —Ç–µ–∫—Å—Ç: {transcript}. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è, –µ—Å—Ç—å –ª–∏ —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å—ã, –∏ –∂–¥–∏—Ç–µ –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–µ–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å, —á—Ç–æ –±—ã–ª–æ —Ç—Ä—É–¥–Ω—ã–º. –î–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ –∏—Ö –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
        messages.append({"role": "assistant", "content": request})
        messages.append({"role": "user", "content": request})
    elif "–∞–Ω–∞–ª–æ–≥" in request or "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞" in request or "–ø–æ—Ö–æ–∂–µ–µ" in request or "—Å—Ö–æ–∂–µ–µ" in request:
        request=f"–î–∞–π—Ç–µ –º–Ω–µ –∞–Ω–∞–ª–æ–≥–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —É—á–µ–±–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º. –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–≤—è—â–µ–Ω—ã –æ–¥–Ω–æ–π —Ç–µ–º–µ, –∏ –∏–¥–µ—è, –ø–æ–ª–µ, —Å—Å—ã–ª–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ï—Å–ª–∏ —è —Å–∫–∞–∂—É –≤–∞–º —Ä–∞–∑–¥–∞–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, —Å–æ–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ò—Å—Ç–æ—á–Ω–∏–∫–æ–º —è–≤–ª—è–µ—Ç—Å—è: {request}. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —Ñ—Ä–∞–∑—ã: –ï—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏, –±–ª–∏–∑–∫–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∂–∞–Ω—Ä—É, –≤–æ—Ç –æ–Ω–∏:\n"
        messages.append({"role": "assistant", "content": request})
        messages.append({"role": "user", "content": request})    
    elif "–ø—Ä–∞–∫—Ç–∏–∫–∞" in request or "—Ç–µ—Å—Ç" in request or "—ç–∫–∑–∞–º–µ–Ω" in request or "–∑–∞–¥–∞–Ω–∏–µ" in request or "–≤–æ–ø—Ä–æ—Å—ã" in request:
        request=f"–î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 5 –∏–ª–∏ 10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–º–æ–π, –∫–æ—Ç–æ—Ä—É—é —è –∑–∞–ø—Ä–æ—Å–∏–ª. –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –æ–±–æ–±—â–∏–ª–∏ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞. –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –∏ –µ—Å–ª–∏ —è –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É, —Ç–æ –ø–æ–ø—Ä–∞–≤—å—Ç–µ –º–µ–Ω—è. –¢–µ–ø–µ—Ä—å –≤–æ—Ç –∑–∞–ø—Ä–æ—Å: {request}. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —Ñ—Ä–∞–∑—ã: –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç"
        messages.append({"role": "assistant", "content": request})
        messages.append({"role": "user", "content": request})    
    else:
        if tutor_mode:
            # Provide clues instead of direct answers
            request=f"–ù–µ –¥–∞–≤–∞–π—Ç–µ –º–Ω–µ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –¥–∞–π—Ç–µ –º–Ω–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–æ–ø—Ä–æ—Å–µ. –ï—Å–ª–∏ —è –∏—Å–ø—ã—Ç—ã–≤–∞—é —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–æ–º–æ—á—å –º–Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –∏ –µ–µ —Ä–µ—à–µ–Ω–∏–∏. –¢–µ–ø–µ—Ä—å –≤–æ—Ç –ø—Ä–æ—Å—å–±–∞: {request}"
            messages.append({"role": "assistant", "content": request})
            messages.append({"role": "user", "content": request})    
        else:
            request=f"–ü—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–π –æ—Ç–≤–µ—Ç. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–æ—Ç –ø—Ä–æ—Å—å–±–∞: {request}"
            messages.append({"role": "assistant", "content": request})
            messages.append({"role": "user", "content": request})
            
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
    )

    output_text = response['choices'][0]['message']['content']
    return output_text


st.title("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç TARS üëæ")
if 'generated' not in st.session_state:
    st.session_state['generated'] = []
if 'past' not in st.session_state:
    st.session_state['past'] = []


tutor_mode = st.checkbox("–†–µ–∂–∏–º –†–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞")
user_input = st.text_input("–í—ã:", key='input')

if user_input:
    output = chat_completion(user_input, tutor_mode)
    # Store the output
    st.session_state['past'].append(user_input)
    st.session_state['generated'].append(output)
    user_input = ""

if tutor_mode:
    st.write("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞")     
else:
    st.write("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ ChatGPT")
if st.session_state['generated']:
    for i in range(len(st.session_state['past'])-1, -1, -1):
        message(st.session_state["generated"][i], key=str(i),avatar_style='thumbs')
        message(st.session_state['past'][i], is_user=True, key=str(i) + '_user',avatar_style='micah')
